% temporal order judgment, variability test% k schneider 12/10/2015clear all% --------------------------% user controlled parameters% --------------------------% spatial parametersp.sd =          1;	% standard deviation of Guassian envelope (degrees of visual angle)p.cutoff =      3;	% cut off stimulus this many standard deviations from the centerp.freqs =       3;	% spatial frequencies (cpd)p.ecc =         6;	% eccentricity of target center from fixation (deg)p.contrast =    75; % desired stimuli contrasts (percent)% temporal parametersp.min_fix_time =        0.5;    % minimum time between response and the next cue (s)p.max_fix_time =        1;      % maximump.target_pres_time =    0;      % duration of target presentation (ms) (if 0, stays on all the time)p.max_rtime =           3;      % maximum time to wait for reaction after stimuli are presented (s)p.soas_frames =         [0:20]; % stimulus onset asynchronies (frames)% display parametersp.screen_width =    39;     % width of screen (cm) (aspect ratio 4:3)p.distance = 		50;     % distance between subject and screen (cm)p.monitor_gamma =   2.236;	% gamma of the display monitor in psychophysics room -- measured on 11/26/12quseswitcherbox =   0;      % enable switcher box?p.br_ratio =        128.3;  % blue to red ratio of the switcher box -- use value on sticker on the box, or measure it% miscellaneous parameters and flagsp.ntrials = 1000;           % total number of trials, distributed among different SOAsp.pause_trials = 50;		% pause after how many trials? (0 = never)key(1) = KbName('s');       % name of the key that subjects will press indicating "the two Gabors have the same contrast"key(2) = KbName('d');       % name of the key that subjects will press indicating "the two Gabors have different contrasts"% --------------------------------% don't change anything below here% --------------------------------rng('shuffle'); % seed random number generator by timetim=fix(clock);p.subject = input('Enter subject''s ID: ', 's');if isempty(p.subject)    p.subject = 'test';endScreen('Preference', 'SkipSyncTests', 1);ListenChar(2);  % turn off keyboard listening in Matlab Window% ------------------------% set up trials parameters% ------------------------nsoas = length(p.soas_frames);p.soas_index = randi(nsoas,1,p.ntrials);    % index of SOAs on each trialp.soas_actual = zeros(1,p.ntrials);         % actual measured SOAs on each trial (s)p.rtime = zeros(1,p.ntrials);               % response time for each trialp.answer = zeros(1,p.ntrials);              % answer: left or right? (1 or 2)p.trial_start_time = zeros(1,p.ntrials);    % start time of trial since beginning of experiment (s)p.first_side = randi(2, 1, p.ntrials);      % which size is first?  left = 1, right = 2nfreqs = length(p.freqs);                   % number of spatial frequenciesp.freq = randi(nfreqs, 1, p.ntrials);       % which spatial frequency?p.fix_time = (p.max_fix_time - p.min_fix_time) * rand(1, p.ntrials) + p.min_fix_time; % fixation timetry    % ---------------    % open the screen    % ---------------        HideCursor;    screens = Screen('Screens');    screenNumber = max(screens);    if quseswitcherbox        bg = double(lum2clut(0.5, p.monitor_gamma, p.br_ratio));   % mean luminance    else        bg = 0.5^(1/p.monitor_gamma)*255;   % mean luminance without switcher    end    [w, rect] = Screen('OpenWindow', screenNumber);    xc = rect(3)/2; % horizontal screen center    yc = rect(4)/2; % vertical screen center    if quseswitcherbox        switchColor(w);			% switch to grayscale mode if using switcher box    end    Screen('FillRect', w, bg);    cue_color = [0 0 0];    text_color = [0 0 0];    black_color = [0 0 0];    white_color = [255 255 255];    Screen('TextSize', w, 24);    txt = 'Please wait, generating stimuli....';    normBoundsRect = Screen('TextBounds', w, txt);    txtloc = [xc - normBoundsRect(3)/2, yc + normBoundsRect(4)/2];    Screen('DrawText', w, txt, txtloc(1), txtloc(2), text_color);    Screen('Flip', w);    Priority(MaxPriority(w));        % define fixation point    dfp = @(w,c,s,xc,yc) Screen(w, 'FillRect', c, repmat([xc; yc],[2 3]) + [-1 -1 1 1]' * s);    fixation_point = @() dfp(w,[white_color' black_color' white_color'],[3 2 1],xc,yc);        % --------------------------    % set up temporal parameters    % --------------------------        p.ifi=Screen('GetFlipInterval', w);   % inter-frame interval    p.frame_rate = 1/p.ifi;   % refresh rate (Hz)    p.soas_s = p.ifi * p.soas_frames;        % -------------------------    % set up spatial parameters    % -------------------------        ppd = pi /180 * rect(3) * p.distance / p.screen_width; % number of pixels subtended by one degree of visual angle at fixation    ecc = ppd * p.ecc;      % eccentricity of target center from fixation (pixels)    sd = ppd * p.sd;        % standard deviation of Gaussian envelope (pixels)        % generate stimulus images for each possible spatial frequency    texsize= round(p.cutoff*sd);       % half-size of the image    [x,y] = meshgrid(-texsize:texsize, -texsize:texsize);    g = exp(-0.5*(x.^2+y.^2)/sd^2);    % gaussian envelope    stimtex = zeros(nfreqs);    for j=1:nfreqs        img = cos(2 * pi * p.freqs(j)/ppd * x) .* g;   % 100% contrast image        lum_img = p.contrast/100 * img ./ 2 + 0.5; % 0 to 1 luminance        if quseswitcherbox            rgb_img = lum2image(lum_img, p.monitor_gamma, p.br_ratio);	% RGB image (0 to 255)        else            rgb_img = lum_img .^ (1/p.monitor_gamma) * 255;        end        stimtex(j)=Screen('MakeTexture', w, rgb_img);    end        % stimuli locations    target_rect = [xc - ecc - texsize, yc - texsize, xc - ecc + texsize, yc + texsize;        xc + ecc - texsize, yc - texsize, xc + ecc + texsize, yc + texsize];        % ------------------------------------    % main experiment: loop through trials    % ------------------------------------        start_time = GetSecs;    for t = 1:p.ntrials                if t == 1            txt = 'Fixate then press any key to begin.';        elseif mod(t-1,50) == 0            txt = sprintf('You are %d%% done.  Take a break if needed.  Then fixate and press any key to resume.',round(100*t/p.ntrials));        else            txt = [];        end        if ~isempty(txt)            normBoundsRect = Screen('TextBounds', w, txt);            txtloc = [xc - normBoundsRect(3)/2, yc + normBoundsRect(4)/2];            Screen('DrawText', w, txt, txtloc(1), txtloc(2), text_color);            fixation_point();            Screen('Flip', w);            KbWait;        end                soa_frames = p.soas_frames(p.soas_index(t));  % SOA for trial (frames)        % clear screen        fixation_point();        [vbl, fix_onset] = Screen('Flip', w);        p.trial_start_time(t) = fix_onset - start_time;                % draw targets        fixation_point();        Screen('DrawTexture', w, stimtex(p.freq(t)), [], target_rect(p.first_side(t),:)); % first target        if soa_frames == 0            Screen('DrawTexture', w, stimtex(p.freq(t)), [], target_rect(3-p.first_side(t),:)); % second target            [vbl, target1_onset] = Screen('Flip', w, fix_onset + p.fix_time(t));            target2_onset = target1_onset;        else            [vbl, target1_onset] = Screen('Flip', w, fix_onset + p.fix_time(t), 1);            for i=1:soa_frames-1                Screen('Flip', w, 0, 1);            end            Screen('DrawTexture', w, stimtex(p.freq(t)), [], target_rect(3-p.first_side(t),:)); % second target            [vbl, target2_onset] = Screen('Flip', w);            p.soas_actual(t) = target2_onset - target1_onset;        end                if p.target_pres_time > 0;            % clear targets            fixation_point();            [vbl, target_offset] = Screen('Flip', w, target_onset + p.target_pres_time/1000);        end                % ------------        % get response        % ------------                % poll keyboard        keydown = zeros(1,2);        while(~xor(keydown(1), keydown(2)))  % wait for one (but not both) response keys to be pressed            [keyisdown, secs, keycode] = KbCheck;            for ik = 1:2                keydown(ik) = keycode(key(ik));            end                        WaitSecs(0.001);    % wait for 1 ms to avoid overloading CPU        end        if keydown(1)            p.answer(t) = 1;        else            p.answer(t) = 2;        end        p.rtime(t) = secs - target2_onset;        while(keyisdown)    % wait for keys to be released            [keyisdown, secs, keycode] = KbCheck;            WaitSecs(0.001);        end    end        Priority(0);    Screen('CloseAll');    ShowCursor;    ListenChar;catch    Screen('CloseAll');    Priority(0);    ShowCursor;    rethrow(lasterror);    ListenChar;end% ---------% save data% ---------filename = sprintf('tojvar-%s-%s', p.subject, datestr(tim,30));save(filename, 'p');  % save data