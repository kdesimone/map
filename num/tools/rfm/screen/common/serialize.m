function str = serialize( varargin )% SERIALIZE  Serialize variables into an executable string% % str = serialize( arg1, [ arg2, ... ] )% 05-Jun-04 -- created (RFM)% decide whether there's a forced nameif isempty(inputname(nargin)) & isstr(varargin{nargin}),	forcedname=varargin{nargin};	nvars=nargin-1;else	forcedname='';	nvars=nargin;end% if more than one variable, find serialization via recursionstr='';if nvars>1,	for i=1:nvars,		str=[ str serialize(varargin{i},[ forcedname '' ]) ];	end	returnend% find the variable nameif ~isempty(forcedname),	vname=forcedname;elseif ~isempty(inputname(1)),	vname=inputname(1);else	vname='noname';end% stringif isstr(varargin{1}),	str=[ str sprintf('%s=''%s''; ',vname,varargin{1}) ];% numericelseif isnumeric(varargin{1}),	str=[ str sprintf('%s=%s; ',vname,mat2str(varargin{1},6)) ];% structelseif isstruct(varargin{1}),	% step through fields	f=fieldnames(varargin{1});	for j=1:size(f,1),		str=[ str serialize(getfield(varargin{1},f{j}),[ vname '.' f{j} ]) ];	end	% otherelse,	str=[ str sprintf('%s=''unimplemented variable type''; ',vname) ];endreturn